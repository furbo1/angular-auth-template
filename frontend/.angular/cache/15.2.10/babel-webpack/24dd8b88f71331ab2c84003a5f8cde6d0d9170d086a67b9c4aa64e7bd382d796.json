{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(next, state) {\n    const isAuthenticated = localStorage.getItem('isAuthenticated');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      // Redirect to login page\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;EAAW;EAErCC,WAAW,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC/D,IAAIF,eAAe,EAAE;MACnB,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAAC;qBAfUT,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAU,SAATV,SAAS;IAAAW,YAFR;EAAM","names":["AuthGuard","constructor","router","canActivate","next","state","isAuthenticated","localStorage","getItem","navigate","factory","providedIn"],"sourceRoot":"","sources":["/Users/alex/Documents/Code/create-angular-auth/frontend/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n\n    const isAuthenticated = localStorage.getItem('isAuthenticated');\n    if (isAuthenticated) {\n      return true;\n    } else {\n      // Redirect to login page\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}